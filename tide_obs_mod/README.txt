This code is focused on the gathering, analysis, and comparison of observed and modeled tides.

=================================================================================
* get_obs_tide.py
Code to automate getting year-long tide height records from a series of NOAA and DFO sites around the Salish Sea and NE Pacific coast.  Also computes harmonics using utide.

Input: It starts with dicts of station names and numbers from obsfun.py, and then uses methods on that module to get the data for a user-specified year.

Output:
ptools_output/tide/obs_data/...

- m_[station number]_[year].csv is a two-column csv with station information, e.g.:
	id,9432780
	name,Charleston
	lat,43.3450
	lon,-124.3220
	
- tide_[station number]_[year].p is a pickled DataFrame of tide height vs. time, with entries like:
	                             eta
	Date                            
	2017-01-01 00:00:00+00:00  1.236
	2017-01-01 01:00:00+00:00  0.622
	2017-01-01 02:00:00+00:00  0.095
	2017-01-01 03:00:00+00:00 -0.234
	2017-01-01 04:00:00+00:00 -0.277
	2017-01-01 05:00:00+00:00 -0.003
And the time is hourly UTC and the tide height eta is in meters.

- h_[station number]_[year].p is a dict-like object called a "Bunch" that has all the harmonic constituent info generated by utide.

=================================================================================
* obsfun.py
Module of methods used by get_[obs, mod]_tide.py to gather tide data and to do the harmonic analysis using utide.  It has the admirable feature of having a section at the end:
if __name__ == '__main__':
with built-in tests that run if you just run the module.

Note: see Evernote => LiveOcean => "The Tide Problem" to see notes on the installation of utide for python.

=================================================================================
* get_mod_tide.py
This is almost exactly like get_obs_tide.py except it works on model fields.

Input: A single NetCDF file of hourly model surface height (and atm pressure) over the full domain, and the assumption is that it is for a full year.  This is created using LiveOcean/x_layer/layer_extractor.py and a typical filename is:
LiveOcean_output/layer/cas6_v1_lo8_2017.01.01_2017.12.31/zeta_hourly.nc
which has variables:
	ocean_time
	lon_rho
	lat_rho
	lon_psi
	lat_psi
	mask_rho
	h
	zeta
	Pair

Output: is exactly like the files created by get_obs_tides.py, in:
ptools_output/tide/mod_data/[m_, tide_, h_] except that now there is a new column in the tide_ Dataframe giving the atmospheric pressure from the model:
                                eta    Pair (mb)
Date                                            
2017-01-01 00:00:00+00:00  0.035237  1015.315063
2017-01-01 01:00:00+00:00  0.642513  1015.093567
2017-01-01 02:00:00+00:00  0.034924  1015.493774
2017-01-01 03:00:00+00:00 -0.925891  1014.242493

Note: this code uses a little function called get_ij_good() to search for the model water point that is the closest to the requested station (needed because the stations are all right at the coast).

=================================================================================
* plot_obs_locations.py makes a nice map plot of all the tide station locations, with their names.

Input: all the ptools_output/tide/obs_data/m_[].csv files for a user-specified year.

Output: screen plot of location map

=================================================================================
* plot_validation.py is the primary validation tool for all the individual stations.

Input: all the output files for a given year and model run created by get_obs_tide.py and get_mod_tide.py above.

Output: a folder full of png's of validation information, one for each station.  Depending on user-spcified choices these are either in:

- ptools_output/tide/val_series_[gtagex]_[year]/[Station_Name].png which are full-featured plots including a map, or

- ptools_output/tide/web_series_[gtagex]_[year]/[Station_Name].png which are more compact versions, designed to use with the google click-map on the website.  The code also produced some screen output with station locations designed to be cut and pasted into the webpage javascript.

It also produces a little bit of screen output with statistics for the whole group of stations.  E.g. for cas6_v1_lo8 it gave:
	Average Error Statistics
	RMS Error = 0.32 (m)
	RMS Error = 40.09 (% of RMS Tide)
	RMS Tide = 0.82 (m)

=================================================================================
* plot_response.py takes the output of get_[obs, mod]_tide.py and does a "reponse" plot comparing the Amplitude ratio and phase shift for a pari of stations, tyically one coastal and one inland, following Sutherland et al. (2005)

Output: a figure

This is useful for exploring the physics of the model response in terms of the idealized Helmholtz resonator.

=================================================================================
* compare_amplitude_phase.py takes the output of get_[obs, mod]_tide.py and creates a table of screen output which summarizes, for 6 constituents, the ratio of observed/modeled amplitude and the phase difference, for (i) all the coastal stations, and (ii) all the Salish stations.  It loops over a user-specified list of gtagex.

Output: screen output

=================================================================================
NOTE: I have kept some diagnostic output for various runs in ptools_output/tide/obs_mod_summary_output_cas6.

=================================================================================
=================================================================================
